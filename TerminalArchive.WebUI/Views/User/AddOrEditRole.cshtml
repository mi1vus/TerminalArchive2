@using TerminalArchive.Domain.Models
@model TerminalArchive.Domain.Models.Role

@{
    ViewBag.Title = "Редактировать";
}

<h2>Редактировать</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Роль</h4>
        <hr />
        @foreach (var property in ViewData.ModelMetadata.Properties)
        {
            if (property.PropertyName == "Id")
            {
                @Html.Hidden(property.PropertyName)
            }
            else
            if (property.PropertyName == "IdGroup")
            {
                <div class="form-group">
                    <label>@(property.DisplayName ?? property.PropertyName)</label>
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.IdGroup, new SelectList((IEnumerable<Group>)ViewBag.Groups, "Id", "Name", "None"))
                    </div>
                </div>
            }
            else
            if (property.PropertyName == "Rights" && Model.Id != 0)
            {
                <div class="form-group">
                    <label>@(property.DisplayName ?? property.PropertyName)</label>
                    <div class="col-md-10">
                        @{
                            var roles = Model.Rights != null && Model.Rights.Any() ? Model.Rights.Select(r => r.Name).Aggregate((current, next) => current + ", " + next) : " - ";
                        }
                        @Html.Label(roles, null, new { @class = "form-control" })
                    </div>
                </div>
            } else
            if (property.PropertyName != "Rights")
            {
                <div class="form-group">
                    <label>@(property.DisplayName ?? property.PropertyName)</label>
                    <div class="col-md-10">
                        @Html.Editor(property.PropertyName, null, new { @class = "form-control" })
                        @Html.ValidationMessage(property.PropertyName, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
        }
        @*@Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.IdGroup, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.IdGroup, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IdGroup, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Сохранить" class="btn btn-default" />
            </div>
        </div>
    </div>
}

@*<div>
    @Html.ActionLink("Back to List", "Index")
</div>*@
